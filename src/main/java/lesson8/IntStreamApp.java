package lesson8;

import java.util.stream.IntStream;

public class IntStreamApp {

    public static void main(String[] args) {

        //примитивные стримы - int stream, long stream ...

        {//1
// генерируется стрим, в котором лежат только Integer, 0 3 6 9 .... Бесконечный.
            IntStream.iterate(0, i -> i + 3)
                    .filter(integer -> integer % 0 == 2)
                    .skip(2)
                    // или .findFirst() - берет первый попавшийся элемент. findAny() - берет первый любой элемент, в случае стрима он будет первым, в случае параллельного стрима он будет случайный первый попавшийся.
                    .limit(1);
            // Вопрос на собеседовании. Есть вот такой поток. Я хочу получить третий четные элемент, какие операторы вы примените к стриму(он бесконечный)?
        }

        {//2
            IntStream.iterate(0, i -> i + 3)
                    .limit(10);

                    // allMatch() - проверяет, что все элементы этого стрима соответствуют какому то предикату, то есть как только первый элемент будет не соответствовать условию, вернется false.
                    // anyMatch() - ищет хотя бы один элемент, удовлетворяющий данному условию. Ловит первый попавшийся и дальше не идет!!!!!!
                    // noneMath() - это аргумент, проверяет что ни один элемент не соответствует данному предикату. Например, можем проверить, что в нашем массиве нет ни одного четного числа.
        }
    }
}
