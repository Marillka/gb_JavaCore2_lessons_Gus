package lesson13_MultithreadingPart2;

import java.util.concurrent.Semaphore;

public class SemaphoreApp2 {

    public static void main(String[] args) {

        /*
         Стандартные классы синхронизации.
         Помимо синхронизированных методов, синхронизированных блоков кода, или так называемых критических секций, существуют еще стандартные классы синхронизации, которые позволяют нам обеспечивать не просто синхронизацию (регламентировать доступ для одного потока), а позволяет получать более гибкие тактики для управления блокировками.
         Одна из этих стартегий называется семафор. Работает - разрешает одновременный доступ к ресурсу (к любому, к объекту, классу, методу) определенному числу потоков. Пример - ковидные ограничения в кафе, где одновременно в помещении может находиться 10 человек и 11 войти не может. Как только один выходит, может войти новый. Вот так работает семафор на 10 потоков.
         Семафор - стандартный паттерн в разработке вообще, не только в java.
         */

        Semaphore semaphore = new Semaphore(2);// 2 потока одновременно смогут обращаться к ресурсу.

        /*
        У семафор есть 2 метода. Можем его либо получить acquire(), либо отпустить release(). По сути там wait и notify.
        Почему высвобождение ресурса вынесли в блок finally? Чтобы не писать его внутри catch - а. То есть случилась ошибка, не случилась ошибка, взяли разрешение, не взяли разрешение - мы должны обязательно освободить ресурс.
        Почему вместо i используется w? Потому что должна быть effectively final?? НЕ ПОНЯТНО.
         */
        for (int i = 0; i < 10; i++) {
            final int w = i + 1;
            new Thread(() -> {
                try {
                    System.out.println("Поток " + w + " перед семафором");
                    semaphore.acquire();// поток блокируется и ждет.
//                    semaphore.acquire(2);// также можно сделать так, когда один поток занимает 2 места.
                    System.out.println("Поток " + w + " получил доступ к ресурсу");
                    Thread.sleep(500);
                } catch (Exception exception) {
                } finally {
                    System.out.println("Поток " + w + " отпустил ресурс");
                    semaphore.release();
                }
            }).start();
        }

    }
}
